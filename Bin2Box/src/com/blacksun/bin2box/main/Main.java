/*
*   Bin2Box - SBaGen Binaural converter to Monaural and Harmonic Box
*   (c) 2010-2016 Ruan K. F <ruan.klein@gmail.com>
*   All Rights Reserved.
*   Released under the GNU GPL version 3.
* 
*   "This program is free software: you can redistribute it and/or modify
*   it under the terms of the GNU General Public License as published by
*   the Free Software Foundation, either version 3 of the License, or
*   (at your option) any later version.
*
*   This program is distributed in the hope that it will be useful,
*   but WITHOUT ANY WARRANTY; without even the implied warranty of
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*   GNU General Public License for more details.
*
*   You should have received a copy of the GNU General Public License
*   along with this program.  If not, see <http://www.gnu.org/licenses/>."
*/

package com.blacksun.bin2box.main;

import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.awt.Toolkit;
import java.io.File;

import com.blacksun.bin2box.lib.OpenSBGFile;
import com.blacksun.bin2box.lib.OperatingSystem;
import com.blacksun.bin2box.lib.SBGConverter;


/**
 * Main class
 * @author ruan
 */
public class Main extends javax.swing.JFrame {
    
    private final DefaultTableModel model;
    private final About about;

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
        model = (DefaultTableModel) TableFiles.getModel();
        about = new About();
        setImage(); // icon
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        TableFiles = new javax.swing.JTable();
        TextLog = new javax.swing.JTextField();
        MenuBar = new javax.swing.JMenuBar();
        MenuFile = new javax.swing.JMenu();
        MenuItemOpenFile = new javax.swing.JMenuItem();
        MenuItemOpenFolder = new javax.swing.JMenuItem();
        MenuItemExit = new javax.swing.JMenuItem();
        MenuConvert = new javax.swing.JMenu();
        MenuItemToMonaural = new javax.swing.JMenuItem();
        MenuItemToHarmonicBox = new javax.swing.JMenuItem();
        MenuClean = new javax.swing.JMenu();
        MenuItemClean = new javax.swing.JMenuItem();
        MenuHelp = new javax.swing.JMenu();
        MenuItemAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Bin2Box - Binaural to Monaural and Harmonic Box");

        TableFiles.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Status", "Input file", "Output file"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(TableFiles);

        TextLog.setEditable(false);
        TextLog.setText("Status ok");

        MenuFile.setText("File");

        MenuItemOpenFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        MenuItemOpenFile.setText("Open file...");
        MenuItemOpenFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemOpenFileActionPerformed(evt);
            }
        });
        MenuFile.add(MenuItemOpenFile);

        MenuItemOpenFolder.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        MenuItemOpenFolder.setText("Open folder...");
        MenuItemOpenFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemOpenFolderActionPerformed(evt);
            }
        });
        MenuFile.add(MenuItemOpenFolder);

        MenuItemExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        MenuItemExit.setText("Exit");
        MenuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemExitActionPerformed(evt);
            }
        });
        MenuFile.add(MenuItemExit);

        MenuBar.add(MenuFile);

        MenuConvert.setText("Convert");

        MenuItemToMonaural.setText("to Monaural...");
        MenuItemToMonaural.setEnabled(false);
        MenuItemToMonaural.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemToMonauralActionPerformed(evt);
            }
        });
        MenuConvert.add(MenuItemToMonaural);

        MenuItemToHarmonicBox.setText("to Harmonic Box X...");
        MenuItemToHarmonicBox.setEnabled(false);
        MenuItemToHarmonicBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemToHarmonicBoxActionPerformed(evt);
            }
        });
        MenuConvert.add(MenuItemToHarmonicBox);

        MenuBar.add(MenuConvert);

        MenuClean.setText("Clean");

        MenuItemClean.setText("Clean list");
        MenuItemClean.setEnabled(false);
        MenuItemClean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemCleanActionPerformed(evt);
            }
        });
        MenuClean.add(MenuItemClean);

        MenuBar.add(MenuClean);

        MenuHelp.setText("Help");

        MenuItemAbout.setText("About...");
        MenuItemAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemAboutActionPerformed(evt);
            }
        });
        MenuHelp.add(MenuItemAbout);

        MenuBar.add(MenuHelp);

        setJMenuBar(MenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 674, Short.MAX_VALUE)
            .addComponent(TextLog)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 281, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TextLog, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void MenuItemOpenFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemOpenFileActionPerformed
        OpenSBGFile sbgFile = new OpenSBGFile();
        String file = sbgFile.chooseFile();
        
        if(file != null) {
           model.addRow(new Object[] {"Ready", file, ""});
           MenuItemToMonaural.setEnabled(true);
           MenuItemToHarmonicBox.setEnabled(true);
           MenuItemClean.setEnabled(true);
           
           TextLog.setText("Number of files: "+String.valueOf(model.getRowCount())+". Click on \"Convert\" to start process.");
        }
        
    }//GEN-LAST:event_MenuItemOpenFileActionPerformed
    
    private void MenuItemOpenFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemOpenFolderActionPerformed
        OpenSBGFile sbgDir = new OpenSBGFile();
        String[] files;
        
        files = sbgDir.chooseDir();
        
        if(files != null) {
            for (String file : files)
                model.addRow(new Object[]{"Ready", file, ""});
            MenuItemToMonaural.setEnabled(true);
            MenuItemToHarmonicBox.setEnabled(true);
            MenuItemClean.setEnabled(true);
            
            TextLog.setText("Number of files: "+String.valueOf(model.getRowCount())+". Click on \"Convert\" to start process.");
        }
        else
            TextLog.setText("Select a valid directory.");
        
        
    }//GEN-LAST:event_MenuItemOpenFolderActionPerformed

    private void MenuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemExitActionPerformed
        if(JOptionPane.showConfirmDialog(null, "Are you sure you want to close the program?", "Exit", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION)
            System.exit(0);
    }//GEN-LAST:event_MenuItemExitActionPerformed

    private void MenuItemCleanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemCleanActionPerformed
        if(JOptionPane.showConfirmDialog(null, "Clean list?", "Clean", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            model.setRowCount(0);
            MenuItemToMonaural.setEnabled(false);
            MenuItemToHarmonicBox.setEnabled(false);
            MenuItemClean.setEnabled(false);
        }
    }//GEN-LAST:event_MenuItemCleanActionPerformed

    private void MenuItemToMonauralActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemToMonauralActionPerformed
        OpenSBGFile sbgDir = new OpenSBGFile();
        String files = sbgDir.chooseOutputDir();
        
        //String separator = System.getProperty("file.separator");
        int errors = 0;
        int numConversions = 0;
        
        if(files != null) {
            for( int i = model.getRowCount() - 1; i >= 0; i-- ) {
                
                if(model.getValueAt(i, 0).equals("OK") || model.getValueAt(i, 0).equals("Error"))
                    continue;
                
                String inputFile = (String) model.getValueAt(i, 1);
                String outputFile = null;
                
                //String[] parts = inputfile.split(separator);
                if(OperatingSystem.isWindows())
                    inputFile = inputFile.replace("\\", "/");
                
                String[] parts = inputFile.split("/");
                
                if(inputFile.endsWith(".sbg"))
                    outputFile = files + "/" + parts[parts.length-1].replaceAll(".sbg$", "_mon.sbg");
                else if (inputFile.endsWith(".SBG"))
                    outputFile = files + "/" + parts[parts.length-1].replaceAll(".SBG$", "_mon.SBG");
                
                model.setValueAt(outputFile, i, 2);
                boolean error = false;
                
                try {
                    SBGConverter sbgConverter = new SBGConverter(inputFile, outputFile);
                    sbgConverter.setMonauralBeat(true);
                    sbgConverter.convertSbagenFile();
                } catch (IOException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                    errors++;
                    error = true;
                }
                
                if(error) {
                    model.setValueAt("Error", i, 0);
                    if(numConversions>0) numConversions--;
                }
                else {
                    model.setValueAt("OK", i, 0);
                    numConversions++;
                }
            }
            
            if(errors>0)
                TextLog.setText("Errors: "+String.valueOf(errors));
            else {
                if(numConversions>0) {
                    TextLog.setText("Success! "+String.valueOf(numConversions)+" files converted to Monaural Beat");
                    try {
                        java.awt.Desktop.getDesktop().open(new File(files));
                    } catch (IOException ex) {
                        Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                else
                    TextLog.setText("No conversion done.");
            }
        }
        else
            TextLog.setText("This directory is invalid or inaccessible. Select other directory to convert files.");
    }//GEN-LAST:event_MenuItemToMonauralActionPerformed

    private void MenuItemToHarmonicBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemToHarmonicBoxActionPerformed
        OpenSBGFile sbgDir = new OpenSBGFile();
        String files = sbgDir.chooseOutputDir();
        
        //String separator = System.getProperty("file.separator");
        int errors = 0;
        int numConversions = 0;
        
        if(files != null) {
            for( int i = model.getRowCount() - 1; i >= 0; i-- ) {
                
                if(model.getValueAt(i, 0).equals("OK") || model.getValueAt(i, 0).equals("Error"))
                    continue;
                
                String inputFile = (String) model.getValueAt(i, 1);
                String outputFile = null;
                
                //String[] parts = inputfile.split(separator);
                
                if(OperatingSystem.isWindows())
                    inputFile = inputFile.replace("\\", "/");
                
                String[] parts = inputFile.split("/");
                
                if(inputFile.endsWith(".sbg"))
                    outputFile = files + "/" + parts[parts.length-1].replaceAll(".sbg$", "_box.sbg");
                else if (inputFile.endsWith(".SBG"))
                    outputFile = files + "/" + parts[parts.length-1].replaceAll(".SBG$", "_box.SBG");
                
                model.setValueAt(outputFile, i, 2);
                boolean error = false;
                
                try {
                    SBGConverter sbgConverter = new SBGConverter(inputFile, outputFile);
                    sbgConverter.setMonauralBeat(false);
                    sbgConverter.convertSbagenFile();
                } catch (IOException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                    errors++;
                    error = true;
                }
                
                if(error) {
                    model.setValueAt("Error", i, 0);
                    if(numConversions>0) numConversions--;
                }
                else {
                    model.setValueAt("OK", i, 0);
                    numConversions++;
                }
                
            }
            
            if(errors>0)
                TextLog.setText("Errors: "+String.valueOf(errors));
            else {
                if(numConversions>0) {
                    TextLog.setText("Success! "+String.valueOf(numConversions)+" files converted to Harmonic Box X");
                    try {
                        java.awt.Desktop.getDesktop().open(new File(files));
                    } catch (IOException ex) {
                        Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                else
                    TextLog.setText("No conversion done.");
            }
        }
        else
            TextLog.setText("This directory is invalid or inaccessible. Select other directory to convert files.");
    }//GEN-LAST:event_MenuItemToHarmonicBoxActionPerformed

    private void MenuItemAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemAboutActionPerformed
        if(about.isVisible())
            about.toFront();
        else
            about.setVisible(true);
    }//GEN-LAST:event_MenuItemAboutActionPerformed

    /**
     * @param args the command line arguments
     * @throws java.io.IOException
     */
    public static void main(String args[]) throws IOException {
        
        if(args.length>0) {
            CommandLine commandLine = new CommandLine(args);
            commandLine.processCommandLine();
        }
        else {
        
            /* Set the Nimbus look and feel */
            //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
            /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
            * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
            */
            try {
                /*
                for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                    if ("Nimbus".equals(info.getName())) {
                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                        break;
                    }
                }
                */
                javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
                java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            }
            //</editor-fold>
        
            //</editor-fold>
        
            /* Create and display the form */
            java.awt.EventQueue.invokeLater(() -> {
                new Main().setVisible(true);
            });
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JMenu MenuClean;
    private javax.swing.JMenu MenuConvert;
    private javax.swing.JMenu MenuFile;
    private javax.swing.JMenu MenuHelp;
    private javax.swing.JMenuItem MenuItemAbout;
    private javax.swing.JMenuItem MenuItemClean;
    private javax.swing.JMenuItem MenuItemExit;
    private javax.swing.JMenuItem MenuItemOpenFile;
    private javax.swing.JMenuItem MenuItemOpenFolder;
    private javax.swing.JMenuItem MenuItemToHarmonicBox;
    private javax.swing.JMenuItem MenuItemToMonaural;
    private javax.swing.JTable TableFiles;
    private javax.swing.JTextField TextLog;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    private void setImage() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/com/blacksun/bin2box/img/Bin2Box.png")));
    }
}
